<?php

namespace app\modules\admin\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "post".
 *
 * @property integer $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property integer $cat_id
 *
 * @property Categories $cat
 */
class Post extends \yii\db\ActiveRecord
{
    public $newTags;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'post';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title', 'slug', 'description', 'content'], 'required'],
            [['content'], 'string'],
            [['cat_id'], 'integer'],
            [['date'], 'string'],
            [['autor'], 'string'],
            [['link'], 'string'],
            [['title', 'slug', 'description'], 'string', 'max' => 255],
            [['newTags'], 'safe'],
            [['cat_id'], 'exist', 'skipOnError' => true, 'targetClass' => Categories::className(), 'targetAttribute' => ['cat_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Заголовок *',
            'slug' => 'Slug *',
            'date' => 'Дата',
            'autor' => 'Автор',
            'link' => 'Ссылка',
            'description' => 'Описание *',
            'content' => 'Контент *',
            'image' => 'Изображение',
            'cat_id' => 'Категория *',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCat()
    {
        return $this->hasOne(Categories::className(), ['id' => 'cat_id']);
    }

    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])
            ->viaTable('post_tag', ['post_id' => 'id']);
    }

    public function saveImage($filename)
    {
        $this->image = $filename;
        return $this->save(false);
    }

    public function getImage()
    {
        return ($this->image) ? 'img/' . $this->image : '/browser.png';
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImagesUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }
    public function afterFind()
    {
        $this->newTags = $this->tags;
        parent::afterFind(); // TODO: Change the autogenerated stub
    }
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $arr = ArrayHelper::map($this->tags,'id','id');
        foreach ($this->newTags as $one) {
            if(!in_array($one,$arr)) {
                $model = new PostTag();
                $model->post_id=$this->id;
                $model->tag_id=$one;
                $model->save();
            }
            if(isset($arr[$one])) {
                unset($arr[$one]);
            }
        }
        PostTag::deleteAll(['tag_id'=>$arr]);
    }
}
